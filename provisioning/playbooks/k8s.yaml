---
- name: Install Python and upgrade packages
  hosts: k8s
  tasks:
    - name: Check if using cloud-init
      ansible.builtin.raw: cloud-init --version
      register: cloudinit_version_output
      changed_when: false
      ignore_errors: true
      tags:
        - check_cloudinit

    - name: Wait for cloud-init to finish
      when: cloudinit_version_output.rc == 0
      become: true
      ansible.builtin.raw: cloud-init status --wait
      register: cloudinit_status_wait_output
      failed_when: cloudinit_status_wait_output.rc == 1
      changed_when: true
      tags:
        - check_cloudinit

    - name: Check if Python exists
      ansible.builtin.raw: python --version
      register: python_version_output
      changed_when: false
      ignore_errors: true
      tags:
        - install_python

    - name: Install Python
      when: python_version_output.rc != 0
      become: true
      ansible.builtin.raw: dnf install --assumeyes python
      changed_when: true
      tags:
        - install_python

    - name: Upgrade all packages and reboot system
      become: true
      block:
        - name: Upgrade all packages
          ansible.builtin.dnf:
            name: "*"
            state: latest

        - name: Reboot
          ansible.builtin.reboot:
          tags:
            - reboot
      tags:
        - upgrade_packages
  tags:
    - pre_setup

- name: Apply common configuration for all Kubernetes nodes
  hosts: k8s
  tasks:
    - name: Apply common configuration for all Kubernetes nodes
      ansible.builtin.import_role:
        name: k8s_common
      vars:
        k8s_common_download_dir: "{{ download_dir }}"
        k8s_common_runc_version: "{{ k8s.runc_version }}"
        k8s_common_containerd_version: "{{ k8s.containerd_version }}"
        k8s_common_cni_plugins_version: "{{ k8s.cni_plugins_version }}"
        k8s_common_crictl_version: "{{ k8s.crictl_version }}"
        k8s_common_version: "{{ k8s.version }}"
        k8s_common_storage: "{{ k8s.storage }}"
  tags:
    - k8s
    - k8s_common

- name: Setup Kubernetes control plane nodes
  hosts: k8s_control_plane
  tasks:
    - name: Setup Kubernetes control plane nodes
      ansible.builtin.import_role:
        name: k8s_control_plane
      vars:
        k8s_control_plane_cluster_endpoint: "{{ k8s.cluster_endpoint }}"
        k8s_control_plane_kube_vip_version: "{{ k8s.kube_vip_version }}"
  tags:
    - k8s
    - k8s_control_plane
    - k8s_control_plane_common

- name: Initialize Kubernetes control plane
  hosts: k8s_control_plane_primary
  tasks:
    - name: Initialize Kubernetes control plane
      ansible.builtin.import_role:
        name: k8s_control_plane_primary
      vars:
        k8s_control_plane_primary_cluster_endpoint: "{{ k8s.cluster_endpoint }}"
        k8s_control_plane_primary_service_subnet: "{{ k8s.service_subnet }}"
        k8s_control_plane_primary_pod_subnet: "{{ k8s.pod_subnet }}"
        k8s_control_plane_primary_extra_sans: "{{ k8s.extra_sans }}"
        k8s_control_plane_primary_tigera_operator_version: "{{ k8s.calico_version }}"
      tags:
        - k8s_control_plane_primary

    - name: Save control plane certificate key
      no_log: true
      become: true
      ansible.builtin.shell: set -o pipefail && kubeadm init phase upload-certs --upload-certs | tail -1
      changed_when: false
      register: k8s_control_plane_certificate_key
      tags:
        - k8s_control_plane_init_post

    - name: Save join command
      become: true
      ansible.builtin.command: kubeadm token create --print-join-command
      changed_when: false
      register: k8s_kubeadm_join_command
      tags:
        - k8s_control_plane_init_post
  tags:
    - k8s
    - k8s_control_plane
    - k8s_control_plane_init

- name: Join Kubernetes control plane nodes
  hosts: k8s_control_plane_secondary
  become: true
  tags:
    - k8s
  tasks:
    - name: Join Kubernetes cluster as a control plane node
      ansible.builtin.import_role:
        name: k8s_control_plane_secondary
      vars:
        k8s_control_plane_secondary_join_command: "{{ hostvars[groups['k8s_control_plane_primary'][0]]['k8s_kubeadm_join_command']['stdout'] }}"
        k8s_control_plane_secondary_certificate_key: "{{ hostvars[groups['k8s_control_plane_primary'][0]]['k8s_control_plane_certificate_key']['stdout'] }}"
      tags:
        - k8s_control_plane_secondary

- name: Join Kubernetes worker nodes
  hosts: k8s_worker
  become: true
  tags:
    - k8s
  tasks:
    - name: Join Kubernetes cluster as a worker node
      ansible.builtin.import_role:
        name: k8s_worker
      vars:
        k8s_worker_join_command: "{{ hostvars[groups['k8s_control_plane_primary'][0]]['k8s_kubeadm_join_command']['stdout'] }}"

- name: Post cluster initialization configuration
  hosts: k8s_control_plane
  become: true
  tags:
    - k8s
  tasks:
    # - name: Label worker nodes for OpenEBS
    #   when: lookup('env', 'K8S_STORAGE', default='openebs') == 'openebs'
    #   run_once: true
    #   ansible.builtin.command:
    #     argv:
    #       - kubectl
    #       - label
    #       - node
    #       - "{{ item }}"
    #       - openebs.io/engine=mayastor
    #   loop:
    #     - k8s-1
    #     - k8s-2
    #     - k8s-3

    - name: Fetch kubeconfig file
      run_once: true
      ansible.builtin.fetch:
        src: /etc/kubernetes/admin.conf
        dest: k8s-cluster-admin.conf
        flat: true

- name: Configure Flux
  hosts: k8s_control_plane
  become: true
  tags:
    - flux
  tasks:
    - name: Configure Flux role
      ansible.builtin.import_role:
        name: flux
